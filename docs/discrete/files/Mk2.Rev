 #########################################################################################################
#########################################################################################################
#
## Mkn: Model for three state nest evolution
##
## Autor: Rosana Zenil-Ferguson
## Last update: RZF 01/01/2025
#########################################################################################################


# Numero de estados
NUM_STATES=2

# Propuestas (moves), monitores (lo que resulta del MCMC)
moves = VectorMoves()
monitors = VectorMonitors()

#########################
# Leamos la filogenia y los datos
#########################
### Filogenia
observed_phylogeny <- readTrees("data/poliniza_arbol.tre")[1]


## Datos
## 0 = Insecto
## 1 = Viento
data <- readCharacterDataDelimited("data/poliniza_datos.csv",
stateLabels=2,
type="NaturalNumbers",
delimiter=",",
header=TRUE)

taxa <- observed_phylogeny.taxa()

#### Distribucion a priori para los parametros es Gamma

shape_pr := 0.5
rate_pr = observed_phylogeny.treeLength()/50

q_01 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Insecto a Viento
q_10 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Viento a Insecto

# En el vector moves vamos guardando las propuestas
moves.append(mvScale( q_01, weight=2 ))
moves.append(mvScale( q_10, weight=2 ))

### Modelo Mk2 empieza con una matriz llena de zeros
for (i in 1:2){
for (j in 1:2){
        q[i][j]:= 0.0
    }
}
####
q[1][2] := q_01
q[2][1] := q_10


# Definir la Q-matriz infinitesimal (la derivada de la probabilidad)

rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

# El valor de la raiz es una variable aleatoria y por eso necesita su propia distribucion a priori. Ojo, esto es bastante diferente en los paquetes de R

root_frequencies ~ dnDirichlet(rep(1,NUM_STATES))

# Agregamos dos propuestas para la el valor de la raiz

moves.append(mvBetaSimplex(root_frequencies, alpha=0.5, weight=2))

moves.append(mvElementSwapSimplex(root_frequencies, weight=3))

# El modelo Mk2 en la filogenia se llama PhyloCTMC (phylogenetic continuous time markov chain)

ctmc ~ dnPhyloCTMC(Q= rate_matrix, tree=observed_phylogeny, nSites=1, rootFreq=root_frequencies, type="NaturalNumbers")
#Fix our observations of selfing to the tips
ctmc.clamp(data)


#########################
# MCMC - El algoritmo para recuperar la posterior
#########################

# Mymodel es como una caja que guarda todo el objeto que es el modelo.
mymodel = model(rate_matrix)


# Los monitores, como su nombre lo dice van dando seguimiento a lo que esta pasando durante el MCMC

# Este monitor va guardando la posterior (el mas importante)
monitors.append(mnModel(filename="output/mk2_polinizador.log", printgen=1))

##Este monitor imprime en pantalla
monitors.append(mnScreen(printgen=10,q_01))

## Este monitor va guardando lo que ocurre en los nodos- la reconstruccion ancestral
monitors.append(mnJointConditionalAncestralState(filename="output/asr_mk2_polinizador.log",printgen=100,tree=observed_phylogeny,ctmc=ctmc,type="NaturalNumbers"))

## Este monitor va fuardando lo que ocurre en las ramas- el mapa estocastico

monitors.append( mnStochasticCharacterMap(ctmc=ctmc,printgen=100,filename="output/stochmap_mk2_polinizador.log", include_simmap=true))

#### Corramos el MCMC dos veces

mymcmc = mcmc(mymodel, monitors, moves, nruns=2, moveschedule="random")
mymcmc.run(50000)


#########################
# Creando los resumenes de las reconstrucciones ancestrales
#########################

# Con los resultatos ya guardados generemos la reconstruccion ancestral en los nodos
anc_state_trace = readAncestralStateTrace("output/asr_mk2_polinizador_run_1.log")

ancestralStateTree(tree=observed_phylogeny,ancestral_state_trace_vector=anc_state_trace, include_start_states=false, file="output/sr_mk2_polinizador.tree", summary_statistic="MAP", reconstruction="marginal")

# Y un resumen de los mapas estocasticos.
anc_state_trace = readAncestralStateTrace("output/stochmap_mk2_polinizador_run_1.log")
characterMapTree(observed_phylogeny, anc_state_trace, character_file="output/stochmap_mk2_polinizador.tree", posterior_file="output/posteriorpole.tree", burnin=50, reconstruction="marginal")
q()

